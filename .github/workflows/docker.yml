name: CI/CD Docker build and Test

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v3

      - name: üîß Instalar o docker compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: üöÄ Build e Subida da Aplica√ß√£o e do DB
        run: |
          # 1. Subir apenas o DB
          echo "Subindo o banco de dados..."
          docker compose up -d postgres-db

          # 2. Aguardar a porta 5432 do DB abrir usando o bash
          # --- CORRE√á√ÉO AQUI: USAR 'localhost' ---
          DB_HOST="localhost" 
          DB_PORT="5432"
          MAX_WAIT=20 
          
          echo "Aguardando o servi√ßo $DB_HOST:$DB_PORT estar acess√≠vel..."
          for i in $(seq 1 $MAX_WAIT); do
            # Tenta abrir uma conex√£o TCP com localhost:5432 (a porta mapeada)
            (exec 3<>/dev/tcp/$DB_HOST/$DB_PORT) 2>/dev/null
            if [ $? -eq 0 ]; then
              echo "‚úÖ Banco de dados est√° pronto!"
              exec 3>&- 3<&-
              break
            fi
            sleep 1
            if [ $i -eq $MAX_WAIT ]; then
              echo "‚ùå O banco de dados n√£o ficou pronto ap√≥s $MAX_WAIT segundos."
              exit 1
            fi
          done
          
          # 3. Subir a API
          echo "Subindo a API-SPRING..."
          docker compose up -d --build api-spring

      - name: ü©∫ Verificar status dos cont√™ineres
        run: |
          echo "--- Status dos Cont√™ineres ---"
          docker-compose ps
          # ... os logs continuam os mesmos ...

      - name: Aguardar e Verificar Health Check
        uses: ... # Use uma Action que possa fazer um HTTP GET e esperar um 200 OK
        env:
          HEALTH_URL: http://seu-servidor:8080/api/health

      - name: üß™ Testar endpoint de sa√∫de com Retry
        run: |
          MAX_RETRIES=20 # 20 tentativas * 5s = 100 segundos
          DELAY=5        
          URL="http://localhost:8080/api/health" # Aqui o localhost j√° estava correto
          
          echo "Testando endpoint de sa√∫de da API..."
          
          for i in $(seq 1 $MAX_RETRIES); do
            echo "Tentativa $i/$MAX_RETRIES: Aguardando API responder em $URL"
            # O '-s' suprime o progresso, o '-f' faz o curl falhar em erros HTTP (4xx/5xx)
            if curl -s -f $URL; then
              echo "‚úÖ Endpoint respondeu com sucesso!"
              exit 0 
            else
              sleep $DELAY
            fi
          done
          
          echo "‚ùå Endpoint de sa√∫de n√£o respondeu ap√≥s $MAX_RETRIES tentativas."
          exit 1

      #- name: üìû Realizar teste de sa√∫de na API
      #  run: curl --fail http://localhost:8080/swagger-ui/index.html

      - name: üß™ Testar endpoint de sa√∫de
        run: |
          echo "Testando endpoint de sa√∫de da API..."
          curl --fail -s http://localhost:8080/api/health || 
          (echo "‚ùå Endpoint de sa√∫de n√£o respondeu corretamente" && exit 1)
          echo "‚úÖ Endpoint respondeu com sucesso!"

      - name: üõë Parar os cont√™ineres ap√≥s teste
        if: always()
        run: docker-compose down

      - name: ‚úÖ Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: üöÄ Build e Push da imagem para o Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/apicursos:latest

